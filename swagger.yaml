openapi: 3.0.0
info:
  title: Portfolio Manager Watchlist API
  version: 1.0.0
paths:
  /api/watchlist:
    get:
      summary: Get all watchlist stocks
      responses:
        '200':
          description: A list of watchlist stocks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: integer }
                    symbol: { type: string }
                    name: { type: string }
                    sector: { type: string }
                    description: { type: string }
                    current_price: { type: number }
                    last_updated: { type: string, format: date }
    post:
      summary: add a stock to watchlist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                symbol: { type: string }
      responses:
        '201':
          description: add success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message: { type: string }
                    symbol: { type: string }
    delete:
      summary: delete a stock from watchlist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                symbol: { type: string }
      responses:
        '200':
          description: delete success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message: { type: string }
                    symbol: { type: string }

  /api/portfolio:
    get:
      summary: Get all portfolio items
      responses:
        '200':
          description: A list of portfolio items
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: integer }
                    symbol: { type: string }
                    volume: { type: integer }
    post:
      summary: Add a stock to portfolio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                symbol: { type: string }
                volume: { type: integer }
      responses:
        '201':
          description: Item added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  id: { type: integer }
  /api/portfolio/{id}:
    delete:
      summary: Delete a portfolio item
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Item removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }     
  /api/portfolio/{symbol}/details:
    get:
      summary: get stock details
      parameters:
        - symbol: id
      responses:
        '200':
          description: delete success
          content:
            application/json:
              schema:
                type: object
                  properties:
                    symbol: { type: string }
                    name: { type: string }
                    current_price: { type: number }
                    investmentAmount: { type: number }
                    historicalPrices:
                    type: array
                    items:
                      data: {type:string}
                      price: {type:number}
  /account/cash/add:
    get:
      summary: add cash to account
      responses:
        '200':
          description: add successfully 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message : { type: string }
  /portfolio/buy:
    post:
      summary: buy a stock to portfolio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                symbol: { type: string }
                volume: { type: integer }
                price: { type: number }
      responses:
        '200':
          description: buy successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message: { type: string }
  /portfolio/sell:
    post:
      summary: sell a stock to portfolio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                symbol: { type: string }
                volume: { type: integer }
      responses:
        '201':
          description: Item sell success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
  /api/getCash:
    get:
      summary: Get account balance
      responses:
        '200':
          description: account balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  account: { type: number }
  /api/historyBuy:
    get:
      summary: Get history of buy
      responses:
        '200':
          description: history list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: integer }
                    symbol: { type: string }
                    price: { type: number }
                    volume: { type: integer }
